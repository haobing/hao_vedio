
#include "libavcodec/avcodec.h"
#include "libavformat/avformat.h"
#include "libavutil/pixfmt.h"
#include "libswscale/swscale.h"
#include "libavutil/opt.h"
#include<stdio.h>

int main()
{
    AVOutputFormat *ofmt =NULL;
    AVFormatContext *ifmt_ctx = NULL,*ofmt_ctx = NULL;
    AVPacket pkt;
    const char *in_filename,*out_filename;
    int ret,i;
    int videoindex=-1;
    int frame_index = 0;
    int64_t start_time = 0;

    in_filename = "cuc_ieschool.h264";
    //out_filename = "rtmp://localhost/publishlive/livestream";
    out_filename = "rtp://192.168.100.149:6666";

    av_register_all();
    avformat_network_init();

    if((ret = avformat_open_input(&ifmt_ctx,in_filename,0,0))<0)
    {
        printf("can't open input file\n");
    }

    if((ret = avformat_find_stream_info(ifmt_ctx,0))<0)
    {
        printf("faild to retrieve input stream information\n");
    }

    for(i=0;i<ifmt_ctx->nb_streams;i++)
    {
        if(ifmt_ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO)
        {
            videoindex = i;
            break;
        }
    }

    av_dump_format(ifmt_ctx,0,in_filename,0);

    avformat_alloc_output_context2(&ofmt_ctx,NULL,"rtp",out_filename);

    ofmt = ofmt_ctx->oformat;

    for(i=0;i<ifmt_ctx->nb_streams;i++)
    {
        AVStream *in_stream = ifmt_ctx->streams[i];
        AVStream *out_stream = avformat_new_stream(ofmt_ctx,in_stream->codec->codec);

        avcodec_copy_context(out_stream->codec,in_stream->codec);

        out_stream->codec->codec_tag = 0;
        
        if(ofmt_ctx->oformat->flags&AVFMT_GLOBALHEADER)
        {
            out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
        }
    }

    av_dump_format(ofmt_ctx,0,out_filename,1);

    avio_open(&ofmt_ctx->pb,out_filename,AVIO_FLAG_WRITE);

    avformat_write_header(ofmt_ctx,NULL);

    start_time = av_gettime();
    while(1)
    {
        AVStream *in_stream,*out_stream;

        ret = av_read_frame(ifmt_ctx,&pkt);
        if(ret < 0)
        {
            break;
        }
        //usleep(1000);
        if(pkt.pts == AV_NOPTS_VALUE)
        {
            AVRational time_base1 = ifmt_ctx->streams[videoindex]->time_base;
            int64_t calc_duration = (double)AV_TIME_BASE/av_q2d(ifmt_ctx->streams[videoindex]->r_frame_rate);
            pkt.pts = (double)(frame_index*calc_duration)/(double)(av_q2d(time_base1)*AV_TIME_BASE);
            pkt.dts = pkt.pts;
            pkt.duration = (double)calc_duration/(double)(av_q2d(time_base1)*AV_TIME_BASE);           
        }

        if(pkt.stream_index == videoindex)
        {
            AVRational time_base = ifmt_ctx->streams[videoindex]->time_base;
            AVRational time_base_q = {1,AV_TIME_BASE};

            int64_t pts_time = av_rescale_q(pkt.dts,time_base,time_base_q);
            int64_t now_time = av_gettime()-start_time;
            if(pts_time>now_time)
            {
                av_usleep(pts_time-now_time);
            }
        }

        in_stream = ifmt_ctx->streams[pkt.stream_index];
        out_stream = ofmt_ctx->streams[pkt.stream_index];

        pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream->time_base, out_stream->time_base, (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
        pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream->time_base, out_stream->time_base, (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
        pkt.duration = av_rescale_q(pkt.duration, in_stream->time_base, out_stream->time_base);
        pkt.pos = -1;

        if(pkt.stream_index == videoindex)
        {
            printf("send %8d video frames to output URL\n",frame_index);
            frame_index++;
        }

        av_interleaved_write_frame(ofmt_ctx,&pkt);

        av_free_packet(&pkt);

    }
    av_write_trailer(ofmt_ctx);

    avformat_close_input(&ifmt_ctx);

    avio_close(ofmt_ctx->pb);

    avformat_free_context(ofmt_ctx);
    return 0;
}

