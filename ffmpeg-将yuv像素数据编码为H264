
#include "libavcodec/avcodec.h"
#include "libavformat/avformat.h"
#include "libavutil/pixfmt.h"
#include "libswscale/swscale.h"
#include "libavutil/opt.h"
#include<stdio.h>

int flush_encoder(AVFormatContext *fmt_ctx,unsigned int stream_index)
{
    int ret;
    int got_picture;
    AVPacket pkt;
    if(!(fmt_ctx->streams[stream_index]->codec->codec->capabilities&CODEC_CAP_DELAY))
    {
        return 0;
    }

    while(1)
    {
        pkt.data =NULL;
        pkt.size = 0;
        av_init_packet(&pkt);
        ret = avcodec_encode_video2(fmt_ctx->streams[stream_index]->codec,&pkt,NULL,&got_picture);
        if(ret < 0)
        {
            break;
        }
        ret = av_write_frame(fmt_ctx,&pkt);
        if(ret < 0)
        {
            break;
        }

        return ret;
    }
}

int main()
{
    AVFormatContext *fmt_ctx;
    AVOutputFormat *fmt;
    AVStream *video_st;
    AVCodecContext *pCodecCtx;
    AVCodec *pCodec;
    AVPacket pkt;
    unsigned char *picture_buf;
    AVFrame *pFrame;
    int picture_size;
    int y_size;
    char *infile = "haobing.yuv";
    char *outfile = "pra.h264";
    av_register_all();

    fmt_ctx = avformat_alloc_context();

    avformat_alloc_output_context2(&fmt_ctx,NULL,NULL,outfile);
    fmt = fmt_ctx->oformat;

    video_st = avformat_new_stream(fmt_ctx,0);

    pCodecCtx = video_st->codec;
    pCodecCtx->codec_id = fmt->video_codec;
    pCodecCtx->codec_type = AVMEDIA_TYPE_VIDEO;
    pCodecCtx->pix_fmt = PIX_FMT_YUV420P;
    pCodecCtx->width = 720;
    pCodecCtx->height = 576;
    pCodecCtx->bit_rate = 1900000;
    pCodecCtx->gop_size = 250;
    pCodecCtx->time_base.num =1;
    pCodecCtx->time_base.den = 30;
    pCodecCtx->qmin = 10;
    pCodecCtx->qmax = 51;
    pCodecCtx->qcompress = 0.6;
    pCodecCtx->max_b_frames = 3;

    AVDictionary *param = 0;
    if(pCodecCtx->codec_id == AV_CODEC_ID_H264);
    {
        av_dict_set(&param,"preset","slow",0);
        av_dict_set(&param,"tune","zerolatency",0);
    }

    avio_open(&fmt_ctx->pb,outfile,AVIO_FLAG_READ_WRITE);
    av_dump_format(fmt_ctx,0,outfile,1);

    pCodec = avcodec_find_encoder(pCodecCtx->codec_id);
    avcodec_open2(pCodecCtx,pCodec,&param);

    pFrame = av_frame_alloc();
    pFrame ->format = pCodecCtx->pix_fmt;
    picture_size = avpicture_get_size(pCodecCtx->pix_fmt,pCodecCtx->width,
    pCodecCtx->height);
    picture_buf = (unsigned char *)malloc(picture_size);
    avpicture_fill((AVPicture*)pFrame,picture_buf,pCodecCtx->pix_fmt,pCodecCtx->width,pCodecCtx->height);

    avformat_write_header(fmt_ctx,NULL);

   av_new_packet(&pkt,picture_size);
   y_size = pCodecCtx->width*pCodecCtx->height;

   FILE *fp = fopen(infile,"rb");
   int i = 0;
   while(!feof(fp))
   {
       fread(picture_buf,1,y_size*3/2,fp);
       pFrame->data[0] = picture_buf;
       pFrame->data[1] = picture_buf+y_size;
       pFrame->data[2] = picture_buf +y_size*5/4;
       pFrame->pts = i*(video_st->time_base.den)/((video_st->time_base.num)*25);
       i++;
       pFrame->width = 720;
       pFrame->height = 576;

       int got_picture = 0;
       int ret;
       ret = avcodec_encode_video2(pCodecCtx,&pkt,pFrame,&got_picture);
       {
           if(got_picture)
           {
               pkt.stream_index = video_st->index;
               av_packet_rescale_ts(&pkt,pCodecCtx->time_base,video_st->time_base);
               av_write_frame(fmt_ctx,&pkt);
               av_free_packet(&pkt);
           }
       }
   }
   flush_encoder(fmt_ctx,0);
   av_write_trailer(fmt_ctx);

   avcodec_close(video_st->codec);
   av_free(pFrame);
   av_free(picture_buf);
   avio_close(fmt_ctx->pb);
   avformat_free_context(fmt_ctx);
   fclose(fp);
   return 0;
}


