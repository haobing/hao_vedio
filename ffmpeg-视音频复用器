

#include "libavcodec/avcodec.h"
#include "libavformat/avformat.h"
#include "libavutil/pixfmt.h"
#include "libswscale/swscale.h"
#include "libavutil/opt.h"
#include<stdio.h>

int main()
{
    AVOutputFormat *ofmt = NULL;
    AVFormatContext *ifmt_ctx_v=NULL,*ifmt_ctx_a=NULL,*ofmt_ctx=NULL;
    AVPacket pkt;
    int ret,i;
    int videoindex_v=-1,videoindex_out=-1;
    int audioindex_a=-1,audioindex_out=-1;
    int frame_index=0;
    int64_t cur_pts_v=0,cur_pts_a=0;

    const char *in_file_v="cuc_ieschool.h264";
    const char *in_file_a="cuc_ieschool.aac";

    const char *out_file="cuc_ipschool.mp4";

    av_register_all();

    avformat_open_input(&ifmt_ctx_v,in_file_v,0,0);
    avformat_find_stream_info(ifmt_ctx_v,0);

    avformat_open_input(&ifmt_ctx_a,in_file_a,0,0);
    avformat_find_stream_info(ifmt_ctx_a,0);
    printf("\n===============input information========\n");
    av_dump_format(ifmt_ctx_v,0,in_file_v,0);
    av_dump_format(ifmt_ctx_a,0,in_file_a,0);
    printf("\n==========================================\n");

    avformat_alloc_output_context2(&ofmt_ctx,NULL,NULL,out_file);
    ofmt = ofmt_ctx->oformat;

    for(i=0;i<ifmt_ctx_v->nb_streams;i++)
    {
        AVStream *in_stream,*out_stream;
        if(ifmt_ctx_v->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO)
        {
            in_stream = ifmt_ctx_v->streams[i];
            videoindex_v = i;

            out_stream = avformat_new_stream(ofmt_ctx,in_stream->codec->codec);
            videoindex_out = out_stream->index;

            avcodec_copy_context(out_stream->codec,in_stream->codec);
            out_stream->codec->codec_tag=0;

            if(ofmt_ctx->oformat->flags&AVFMT_GLOBALHEADER)
            {
                out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
            }
        }
    }

    for(i=0;i<ifmt_ctx_a->nb_streams;i++)
    {
        AVStream *in_stream,*out_stream;
        if(ifmt_ctx_a->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO)
        {
            in_stream = ifmt_ctx_a->streams[i];
            audioindex_a = i;

            out_stream = avformat_new_stream(ofmt_ctx,in_stream->codec->codec);
            audioindex_out = out_stream->index;

            avcodec_copy_context(out_stream->codec,in_stream->codec);
            out_stream->codec->codec_tag=0;
            if(ofmt_ctx->oformat->flags&AVFMT_GLOBALHEADER)
            {
               out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
            }

        }
    }

    printf("\n============output information======================\n");
    av_dump_format(ofmt_ctx,0,out_file,1);
    printf("\n=====================================================\n");

    avio_open(&ofmt_ctx->pb,out_file,AVIO_FLAG_WRITE);

    avformat_write_header(ofmt_ctx,NULL);

    AVBitStreamFilterContext* h264bsfc =  av_bitstream_filter_init("h264_mp4toannexb");
    AVBitStreamFilterContext* aacbsfc =  av_bitstream_filter_init("aac_adtstoasc");

    while(1)
    {
        AVFormatContext *ifmt_ctx;
        int stream_index =0;
        AVStream *in_stream,*out_stream;

        if(av_compare_ts(cur_pts_v,ifmt_ctx_v->streams[videoindex_v]->codec->time_base,cur_pts_a,ifmt_ctx_a->streams[audioindex_a]->codec->time_base)<=0)
        {   //printf("in the ts\n");
            ifmt_ctx=ifmt_ctx_v;
            stream_index = videoindex_out;

            if(av_read_frame(ifmt_ctx,&pkt)>=0)
            {
                in_stream = ifmt_ctx->streams[pkt.stream_index];
                out_stream = ofmt_ctx->streams[stream_index];

                if(pkt.stream_index == videoindex_v)
                {
                    if(pkt.pts == AV_NOPTS_VALUE)
                    {   
                        av_init_packet(&pkt);
                        AVRational time_base1 = in_stream->time_base;
                        int64_t calc_duration=(double)AV_TIME_BASE/av_q2d(in_stream->r_frame_rate);
							//Parameters
						pkt.pts=(double)(frame_index*calc_duration)/(double)(av_q2d(time_base1)*AV_TIME_BASE);
						pkt.dts=pkt.pts;
						pkt.duration=(double)calc_duration/(double)(av_q2d(time_base1)*AV_TIME_BASE);
						frame_index++;
                    }
                    cur_pts_v = pkt.pts;
                }
            }
            else
            {
                break;
            }
        }
        else
        {
            ifmt_ctx = ifmt_ctx_a;
            stream_index = audioindex_out;
            if(av_read_frame(ifmt_ctx,&pkt)>=0)
            {
                in_stream = ifmt_ctx->streams[pkt.stream_index];
                out_stream = ofmt_ctx->streams[stream_index];

                if(pkt.stream_index == audioindex_a)
                {
                    if(pkt.pts == AV_NOPTS_VALUE)
                    {
                        AVRational time_base1 = in_stream->time_base;
                        int64_t calc_duration=(double)AV_TIME_BASE/av_q2d(in_stream->r_frame_rate);
							//Parameters
						pkt.pts=(double)(frame_index*calc_duration)/(double)(av_q2d(time_base1)*AV_TIME_BASE);
						pkt.dts=pkt.pts;
						pkt.duration=(double)calc_duration/(double)(av_q2d(time_base1)*AV_TIME_BASE);
						frame_index++;
                    }
                    cur_pts_a = pkt.pts;
                }
            }
            else
            {
                break;
            }

        }

        //av_bitstream_filter_filter(h264bsfc, in_stream->codec, NULL, &pkt.data, &pkt.size, pkt.data, pkt.size, 0);
        av_bitstream_filter_filter(aacbsfc, out_stream->codec, NULL, &pkt.data, &pkt.size, pkt.data, pkt.size, 0);

        pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream->time_base, out_stream->time_base, (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream->time_base, out_stream->time_base, (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		pkt.duration = av_rescale_q(pkt.duration, in_stream->time_base, out_stream->time_base);
		pkt.pos = -1;
		pkt.stream_index=stream_index;

        av_interleaved_write_frame(ofmt_ctx,&pkt);

        av_free_packet(&pkt);
    }

    av_write_trailer(ofmt_ctx);

    av_bitstream_filter_close(h264bsfc);
    av_bitstream_filter_close(aacbsfc);

    avformat_close_input(&ifmt_ctx_v);
	avformat_close_input(&ifmt_ctx_a);

    avformat_free_context(ofmt_ctx);

    return 0;
}


 
