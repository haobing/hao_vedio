

#include "libavcodec/avcodec.h"
#include "libavformat/avformat.h"
#include "libavutil/pixfmt.h"
#include "libswscale/swscale.h"
#include "libavutil/opt.h"
#include<stdio.h>

int main()
{
    AVOutputFormat *ofmt_a=NULL,*ofmt_v=NULL;
    AVFormatContext *ifmt_ctx=NULL,*ofmt_ctx_a=NULL,*ofmt_ctx_v=NULL;
    AVPacket pkt;
    int ret,i;
    int videoindex = -1;
    int audioindex = -1;
    int frame_index = 0;
    AVStream *in_stream;
    AVStream *out_stream;

    const char *in_file = "pra.mp4";
    const char *out_file_v="cuc_ieschool.h264";
    const char *out_file_a="cuc_ieschool.aac";

    av_register_all();

    if((ret = avformat_open_input(&ifmt_ctx,in_file,0,0))<0)
    {
        printf("could not open input file\n");
        return 0;
    }

    if((ret = avformat_find_stream_info(ifmt_ctx,0))<0)
    {
        printf("can't find stream info\n");
        return 0;
    }

    ret = avformat_alloc_output_context2(&ofmt_ctx_v,NULL,NULL,out_file_v);
    if(ret < 0)
    {
        printf("avformat_alloc_output_context2 video error\n");
        return 0;
    }
    ofmt_v = ofmt_ctx_v->oformat;

    ret = avformat_alloc_output_context2(&ofmt_ctx_a,NULL,NULL,out_file_a);
    if(ret <0)
    {
        printf("avformat_alloc_output_context2 audio error\n");
        return 0;
    }
    ofmt_a = ofmt_ctx_a->oformat;

    for(i=0;i<ifmt_ctx->nb_streams;i++)
    {
        AVFormatContext *ofmt_ctx;
        AVStream *in_stream;
        AVStream *out_stream;
        if(ifmt_ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_VIDEO)
        {
            in_stream = ifmt_ctx->streams[i];
            videoindex =i;
            out_stream = avformat_new_stream(ofmt_ctx_v,in_stream->codec->codec);
            avcodec_copy_context(out_stream->codec,in_stream->codec);
            out_stream->codec->codec_tag = 0;

            ofmt_ctx = ofmt_ctx_v;
            if(ofmt_ctx->oformat->flags&AVFMT_GLOBALHEADER)
            {
                out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
            }
        }
        else if(ifmt_ctx->streams[i]->codec->codec_type == AVMEDIA_TYPE_AUDIO)
        {
            in_stream = ifmt_ctx->streams[i];
            audioindex = i;
            out_stream = avformat_new_stream(ofmt_ctx_a,in_stream->codec->codec);
            avcodec_copy_context(out_stream->codec,in_stream->codec);
            out_stream->codec->codec_tag = 0;

            ofmt_ctx = ofmt_ctx_a;
            if(ofmt_ctx->oformat->flags&AVFMT_GLOBALHEADER)
            {
                out_stream->codec->flags |= CODEC_FLAG_GLOBAL_HEADER;
            }
        }
        else
        {
            break;
        }
    }
    printf("\n==============input video============\n");
    av_dump_format(ifmt_ctx,0,in_file,0);

    avio_open(&ofmt_ctx_v->pb,out_file_v,AVIO_FLAG_WRITE);
    avio_open(&ofmt_ctx_a->pb,out_file_a,AVIO_FLAG_WRITE);

    avformat_write_header(ofmt_ctx_v,NULL);
    avformat_write_header(ofmt_ctx_a,NULL);

    AVBitStreamFilterContext* h264bsfc =  av_bitstream_filter_init("h264_mp4toannexb");

    while(1)
    {
        AVFormatContext *ofmt_ctx;
        AVStream *in_stream,*out_stream;
        if(av_read_frame(ifmt_ctx,&pkt)<0)
        {
            break;
        }

        in_stream = ifmt_ctx->streams[pkt.stream_index];

        if(pkt.stream_index == videoindex)
        {
            out_stream = ofmt_ctx_v->streams[0];

            av_bitstream_filter_filter(h264bsfc, in_stream->codec, NULL, &pkt.data, &pkt.size, pkt.data, pkt.size, 0);
            pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream->time_base, out_stream->time_base,(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		    pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream->time_base, out_stream->time_base, (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		    pkt.duration = av_rescale_q(pkt.duration, in_stream->time_base, out_stream->time_base);
		    pkt.pos = -1;
		    pkt.stream_index=0;

            av_interleaved_write_frame(ofmt_ctx_v,&pkt);
            av_free_packet(&pkt);
            frame_index++;
        

        }
        else if(pkt.stream_index == audioindex)
        {
            out_stream = ofmt_ctx_a->streams[0];

            pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream->time_base, out_stream->time_base,(AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		    pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream->time_base, out_stream->time_base, (AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX));
		    pkt.duration = av_rescale_q(pkt.duration, in_stream->time_base, out_stream->time_base);
		    pkt.pos = -1;
		    pkt.stream_index=0;

            av_interleaved_write_frame(ofmt_ctx_a,&pkt);
            av_free_packet(&pkt);
            frame_index++;
        }
        else
        {
            continue;
        }

    }
    av_bitstream_filter_close(h264bsfc);

    av_write_trailer(ofmt_ctx_a);
    av_write_trailer(ofmt_ctx_v);

    avformat_close_input(&ifmt_ctx);

    avformat_free_context(ofmt_ctx_a);
    avformat_free_context(ofmt_ctx_v);

    return 0;

}
